// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6986.m2d16.subsystems;


import org.usfirst.frc6986.m2d16.Robot;
import org.usfirst.frc6986.m2d16.RobotMap;
import org.usfirst.frc6986.m2d16.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import org.usfirst.frc6986.m2d16.RobotMap;

//import static org.junit.Assume.assumeNoException;

import java.sql.Time;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private Solenoid solenoidGear;
    private Compressor compressor1;
   // private final WPI_TalonSRX talonSRX1 = RobotMap.talonSRX1;
    private SpeedControllerGroup speedControllerGroupElevate = RobotMap.speedControllerGroupElevate;
    private Encoder encoder8 = RobotMap.encoder8;
    private final DigitalInput limitSwitch = RobotMap.limitSwitch;
   // Encoder encoder9;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Elevator() {
       

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        //addChild("Speed Controller Group Elevate",speedControllerGroupElevate);

        
        
        solenoidGear = new Solenoid(20, 1);
        addChild("SolenoidGear",solenoidGear);

        
      
        
       // compressor1 = new Compressor(1);
       // addChild("Compressor 1",compressor1);
        
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        //SmartDashboard.putBoolean("limitswitch", LimitSwitch());
        // Put code here to be run every loop
        if(limitSwitch.get() == false){
            encoder8.reset();
        }

    }

    public void Ascend(){
        if(encoder8.get() > 400){
            if(encoder8.get() > 558){
                if(encoder8.get() > 610)
                {
                    speedControllerGroupElevate.set(0);
                }
                else{
                    speedControllerGroupElevate.set(0.15);
                }
                    

                
            }
            else{
                speedControllerGroupElevate.set(0.3);
            }
        }
        else{
            speedControllerGroupElevate.set(0.45);
        }
    }

    public void Decsend(){
        if(encoder8.get() < 125){
            speedControllerGroupElevate.set(-0.3);
        }
        else{
            speedControllerGroupElevate.set(-0.4);
        }
        //speedControllerGroupElevate.set(-0.4);
    }

    public void AscendGrad(double Input){
        speedControllerGroupElevate.set(Input);
    }

    public void DescendGrad(double Input){
        speedControllerGroupElevate.set(Input);
    }

    public void Stop(){
       /* if(encoder8.get() > 625){
            speedControllerGroupElevate.set(0);
        }
        else{
        }
        */
        speedControllerGroupElevate.set(0);
    }

    public boolean LimitSwitch(){
          if(limitSwitch.get() == false){
              //Timer.delay(1);
              return true;
              // Timer.delay(10);
          }
          else{
              return false;
          }
          
    }
    
}


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.



