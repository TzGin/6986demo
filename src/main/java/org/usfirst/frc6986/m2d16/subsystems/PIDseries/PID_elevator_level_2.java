/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc6986.m2d16.subsystems.PIDseries;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import org.usfirst.frc6986.m2d16.Robot;
import org.usfirst.frc6986.m2d16.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

//import static org.junit.Assume.assumeNoException;

import java.sql.Time;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import org.usfirst.frc6986.m2d16.RobotMap;

/**
 * Add your docs here.
 */
public class PID_elevator_level_2 extends PIDSubsystem {
  /**
   * Add your docs here.
   */
  private SpeedControllerGroup speedControllerGroupElevate = RobotMap.speedControllerGroupElevate;
  private Encoder encoder8 = RobotMap.encoder8;
  private final DigitalInput limitSwitch = RobotMap.limitSwitch;

  public PID_elevator_level_2() {
    // Intert a subsystem name and PID values here
    super("SubsystemName", 0.009, 0.02, 0.04);
    setSetpoint(320);
    setAbsoluteTolerance(0.03);
    getPIDController().setOutputRange(-0.3, 0.75);
    //enable();
    getPIDController().setContinuous(false);
    // Use these to get going:
    // setSetpoint() - Sets where the PID controller should move the system
    // to
    // enable() - Enables the PID controller.
  }

  @Override
  public void initDefaultCommand() {
    Stop();
    // Set the default command for a subsystem here.
    // setDefaultCommand(new MySpecialCommand());
  }

  @Override
  protected double returnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot.getAverageVoltage() / kYourMaxVoltage;
    return encoder8.get();
  }

  @Override
  protected void usePIDOutput(double output) {
    speedControllerGroupElevate.pidWrite(output);
    // Use output to drive your system, like a motor
    // e.g. yourMotor.set(output);
  }

  public void Stop(){
    speedControllerGroupElevate.set(0);
  }
}
