/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc6986.m2d16.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;
//import junit.framework.Test;
//package org.usfirst.frc6986.m2d16.subsystems;

import org.usfirst.frc6986.m2d16.Robot;
import org.usfirst.frc6986.m2d16.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.SerialPort;



/**
 * Add your docs here.
 */
public class TrackPanelTest extends Subsystem {
  // Put methods for controlling this subsystem
  private SerialPort serial1;
  //private AutoD autoDrive;
	private final double KP_s = 1;
	private final double KI_s = 0;
	private final double KD_s = 0.01;
	private double integral_s = 0;
	private double derivative_s = 0;
	private double last_error_s = 0;
	private final double target_s = 50;

	private final double KP_r = 1.5;
	private final double KI_r = 0;
	private final double KD_r = 0.01;
	private double integral_r = 0;
	private double derivative_r = 0;
	private double last_error_r = 0;
  private final double target_r = 7;

  private TalonSRX talonSRX1;
	private TalonSRX talonSRX2;
	private TalonSRX talonSRX3;
	private TalonSRX talonSRX10;
	private TalonSRX talonSRX11;
  private TalonSRX talonSRX12;
  
  public double speedAveg;
  public double arcadeValue;
  
  public TrackPanelTest(){
    serial1 = new SerialPort(115200, SerialPort.Port.kUSB1);
    talonSRX1 = new TalonSRX(1);
		talonSRX2 = new TalonSRX(2);
		talonSRX3 = new TalonSRX(3);
		talonSRX10 = new TalonSRX(10);
		talonSRX11 = new TalonSRX(11);
		talonSRX12 = new TalonSRX(12);



  }
  // here. Call these from Commands.
  

  @Override
  public void initDefaultCommand() {
    // Set the default command for a subsystem here.
    // setDefaultCommand(new MySpecialCommand());
  }

  @Override
  public void periodic() {
    try {
			String revString = serial1.readString();
			System.out.println("rev" + revString);
			int lastIndex1 = revString.lastIndexOf("[") + 1;
			int lastIndex2 = revString.lastIndexOf("]");
			String processedString = revString.substring(lastIndex1, lastIndex2);
			int index1 = processedString.indexOf(",");
			int index2 = processedString.lastIndexOf(",");
			double value1 = Double.valueOf(processedString.substring(0, index1));
			double value2 = Double.valueOf(processedString.substring(index1+1,index2));
      double value3 = Double.valueOf(processedString.substring(index2+1));
      double speedAveg;
      double arcadeValue;

			
			double error_s = target_s - value2;
			integral_s = integral_s + error_s;
			derivative_s = error_s - last_error_s;
			double speed_s;
			if(value2 == 0){
				speed_s = 0;
			}else{
				speed_s = (KP_s*error_s + KI_s*integral_s + KD_s*derivative_s)/100;
			}
			last_error_s = error_s;

			double error_r = target_r - value3;
			integral_r = integral_r + error_r;
            derivative_r = error_r - last_error_r;
			double speed_r;
			if(value3 == 0){
				speed_r = 0;
			}else{
				speed_r= (KP_r*error_r + KI_r*integral_r + KD_r*derivative_r)/100;
			}
			last_error_r = error_r;	
			
			System.out.println(speed_r);
			// System.out.println(value3);

			double speedl = 1.3*value1 + 1.5*speed_s + 0.3*speed_r;
      double speedr = 1.3*value1 - 1.5*speed_s + 0.3*speed_r;
      speedAveg = speedl*0.5  + speedr*0.5;
      arcadeValue = speedl - speedr;
      
      
			/*
			talonSRX1.set(ControlMode.PercentOutput, limitspeed(speedl));
			talonSRX2.set(ControlMode.PercentOutput, limitspeed(speedl));
			talonSRX3.set(ControlMode.PercentOutput, limitspeed(speedl));
			talonSRX10.set(ControlMode.PercentOutput, limitspeed(speedr));
			talonSRX11.set(ControlMode.PercentOutput, limitspeed(speedr));
			talonSRX12.set(ControlMode.PercentOutput, limitspeed(speedr));*/
			SmartDashboard.putNumber("speedTrack", speedAveg);
      SmartDashboard.putNumber("differentialTrack", arcadeValue);
      
      
		} catch (Exception e) {
    }	
    
    
      // Put code here to be run every loop

  }

  public void Tracl(){
    Robot.driveTrain.arcadeDrive(speedAveg, arcadeValue);
  }

  

  public double limitspeed(double speed){
		if (speed > 0.3){
			speed = 0.3;
		}else if(speed < 0.05 && speed > 0){
			speed = 0;
		}else if(speed < -0.3){
			speed = -0.3;
		}else if(speed > -0.05 && speed < 0){
			speed = 0;
		}
		return speed;
	}
}
